//高精度加法实现
#include <iostream>
#include <vector>
using namespace std;
const int n=100010;
vector<int> a,b;
vector<int> add(vector<int>&a,vector<int>&b){
    //容器里面的数字已经按照个位在前依次排列了
    //个位相加，大于10进1，模10得出本位，除10得出进位（0or1）
    int t,l,r;
    vector<int>c;
    while(l<=a.size()||r<=b.size()){
        if(l<a.size()){t+=a[l];}//不超过a的范围
        if(r<b.size()){t+=b[r];}//不超过b的范围
        c.push_back(t%10);
        t=t/10;
        l++,r++;
    }
    if(t)c.push_back(t);//最后的余数要加上

    return c;
}

int main(){
    string m,n;
    cin>>m>>n;
    for(int i=m.size()-1;i>=0;i--){
        a.push_back(m[i]-'0');
    }
    for(int i=n.size()-1;i>=0;i--){
        b.push_back(n[i]-'0');
    }
    auto ans=add(a,b);
    for(int i=ans.size()-1;i>=0;i--){
        cout<<ans[i];
    }
    
    return 0;
}
高精度除法：
vector<int>div(vector<int>&A,intb,int&r)//高精度A，低精度b，余数r
{
vector<int>C;//答案
r=0;
for(inti=A.size()-1;i>=0;i--)
{
r=r*10+A[i];//补全r>=b
C.push_back(r/b);//取当前位的答案
r%=b;//r%b为下一次计算
}
reverse(C.begin(),C.end());//倒序为答案
while(C.size()>1&&C.back()==0)C.pop_back();//去除前导零
return C;
}
高精度除法（高精度除低精度）：
vector<int> sum(vector<int> &a,int b){
    //容器内的整数已经按照个位数在前依次排列了
    //a[i]-b[i]-t,其中，本位是模10的结果，t/10是进位
    //这里要考虑结果正负，在输入中调整，保证a大于b
    int i=0,t=0;
    vector<int>c;
    for(i=0;i<a.size();i++){
        t=a[i]*b+t;
        c.push_back(t%10);
        t=t/10;
    }
    c.push_back(t);
    while(c.back()==0&&c.size()>1){
        c.pop_back();
    }
    return c;
}
